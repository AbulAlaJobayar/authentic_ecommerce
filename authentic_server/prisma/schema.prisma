generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  MANAGER
  CUSTOMER
  STAFF
}

enum Status {
  DRAFT
  ACTIVE
  DISCONTINUED
}

enum ActionType {
  IN
  OUT
  ADJUST
}

enum PaymentMethod {
  CASH
  CARD
  BKASH
  NAGAD
  ROCKET
  COD
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum DiscountType {
  ALL_PRODUCTS
  SPECIFIC_PRODUCTS
  CATEGORIES
}

enum ShipmentStatus {
  PENDING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum NotificationType {
  STOCK_ALERT
  ORDER_STATUS
  PROMOTION
}

enum accountStatus {
  ACTIVE
  IN_PROGRESS
  SUSPEND
  BLOCK
}

// Models

model User {
  id            String        @id @default(cuid())
  customId      String
  email         String        @unique
  name          String
  password      String
  mobile        String        @unique
  image         String?
  role          Role          @default(CUSTOMER)
  verifiedAt    Boolean       @default(false)
  isDeleted     Boolean       @default(false)
  accountStatus accountStatus @default(ACTIVE)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  cartItems     CartItem[]
  orders        Order[]
  reviews       Review[]
  wishlist      Wishlist[]
  notifications Notification[]

  @@index([email, name, mobile, role, customId])
  @@map("user")
}

model Supplier {
  id           String         @id @default(cuid())
  name         String
  email        String?
  phone        String?
  address      String?
  isDeleted    Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ProductBatch ProductBatch[]

  @@index([phone, name])
  @@map("supplier")
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  image     String?
  products  Product[]
  createdAt DateTime  @default(now())
  isDeleted Boolean   @default(false)

  @@index([name])
  @@map("category")
}

model Warehouse {
  id           String         @id @default(cuid())
  name         String
  address      String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  isDeleted    Boolean        @default(false)
  productBatch ProductBatch[]

  @@index([name])
  @@map("warehouse")
}

model Product {
  id           String      @id @default(cuid())
  sku          String      @unique
  name         String
  description  String?
  image        String[]
  status       Status      @default(DRAFT)
  sellingPrice Float
  category     Category    @relation(fields: [categoryId], references: [id])
  categoryId   String
  inventory    Inventory?
  isDeleted    Boolean     @default(false)
  reviews      Review[]
  orderItems   OrderItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  CartItem     CartItem[]
  Wishlist     Wishlist[]

  @@index([sku, name, status])
  @@map("product")
}

model ProductBatch {
  id           String    @id @default(cuid())
  inventory    Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId  String
  batchNumber  String
  expiryDate   DateTime
  quantity     Int
  isDeleted    Boolean   @default(false)
  buyingPrice  Float
  costPrice    Float
  sellingPrice Float
  shelfCode    String
  rackCode     String
  supplier     Supplier? @relation(fields: [supplierId], references: [id])
  supplierId   String?
  warehouse    Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId  String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([batchNumber, expiryDate])
  @@map("productBatch")
}

model Inventory {
  id            String         @id @default(cuid())
  product       Product        @relation(fields: [productId], references: [id])
  productId     String         @unique
  quantity      Int? //calculate total quantity by product batch
  alertQuantity Int?           @default(5)
  isDeleted     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  ProductBatch  ProductBatch[]
}

model CartItem {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  @@index([productId])
  @@map("cartItem")
}

model Order {
  id           String      @id @default(cuid())
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  orderItems   OrderItem[]
  orderNumber  String?
  payment      Payment?
  shipment     Shipment?
  status       OrderStatus @default(PENDING)
  shippingCost Float
  total        Float // sum of (OrderItems.unitPrice * quantity) + shippingCost - discounts
  profit       Float // total profit on order
  discount     Discount?   @relation(fields: [discountId], references: [id])
  discountId   String?
  isDeleted    Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([orderNumber, userId, status])
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  isDeleted Boolean  @default(false)
  unitPrice Float // selling price at purchase time
  baseCost  Float // base cost for profit calc
  profit    Float // (unitPrice - baseCost) * quantity
  createdAt DateTime @default(now())

  @@index([orderId, productId])
  @@map("orderItem")
}

model Payment {
  id            String        @id @default(cuid())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       String        @unique
  method        PaymentMethod
  transactionId String
  status        PaymentStatus
  amount        Float
  isDeleted     Boolean       @default(false)
  paidAt        DateTime?
  createdAt     DateTime      @default(now())

  @@index([orderId])
  @@map("payment")
}

model Shipment {
  id             String         @id @default(cuid())
  order          Order          @relation(fields: [orderId], references: [id])
  orderId        String         @unique
  trackingNumber String?
  carrier        String?
  cost           Float          @default(0)
  status         ShipmentStatus @default(PENDING)
  shippedAt      DateTime?
  deliveredAt    DateTime?
  isDeleted      Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([orderId])
  @@map("shipment")
}

model Discount {
  id         String       @id @default(cuid())
  name       String
  code       String?      @unique
  ProductIds String[]
  isDeleted  Boolean      @default(false)
  percentage Float        @default(0)
  maxAmount  Float?
  appliesTo  DiscountType
  active     Boolean      @default(true)
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  orders     Order[]

  @@index([code])
  @@map("discount")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int // 1-5
  comment   String?
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  @@index([productId, userId])
  @@map("review")
}

model Wishlist {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  @@index([productId, userId])
  @@map("wishlist")
}

model Notification {
  id        String           @id @default(cuid())
  user      User?            @relation(fields: [userId], references: [id])
  userId    String?
  title     String
  message   String
  read      Boolean          @default(false)
  type      NotificationType
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([userId])
  @@map("notification")
}

model SalesSummary {
  id          String   @id @default(cuid())
  date        DateTime
  totalSales  Float
  totalOrders Int
  totalProfit Float
  createdAt   DateTime @default(now())

  @@index([date])
  @@map("salesSummary")
}
